{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Reporting_CSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Product_Dimension",
						"type": "DatasetReference"
					},
					"name": "dimensionproduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FinalSinkDatasetVisaReport",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "likedserviceDL",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "selectColumns"
				},
				{
					"name": "filterCustomer12"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "SumPrice"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "LkpProductName"
				},
				{
					"name": "selectColumnAfterLkp"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {Product Id} as string,",
				"          {_c1} as string,",
				"          {_c2} as short,",
				"          {Product Name} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimensionproduct",
				"source1 select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          price,",
				"          payment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns filter(customer_id != 12) ~> filterCustomer12",
				"filterCustomer12 split(payment == 'visa',",
				"     payment == 'mastercard',",
				"     disjoint: false) ~> split1@(Visa, MasterCard, OtherThanVisaAndMasterCard)",
				"split1@OtherThanVisaAndMasterCard derive(payment = coalesce(payment,'N/A')) ~> derivedColumn1",
				"split1@Visa aggregate(groupBy(product_id),",
				"     price = sum(price)) ~> SumPrice",
				"SumPrice sort(asc(product_id, true)) ~> sort1",
				"sort1 derive(price = round(price, 2)) ~> derivedColumn2",
				"derivedColumn2, dimensionproduct lookup(product_id == {Product Id},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LkpProductName",
				"LkpProductName select(mapColumn(",
				"          {Product Id} = product_id,",
				"          {Product Name},",
				"          {Total Price} = price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnAfterLkp",
				"selectColumnAfterLkp keyGenerate(output(Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: 'destination',",
				"     assertFailure_folderPath: 'Errors') ~> sink1"
			]
		}
	}
}